{"name":"Gists.cli","tagline":"Python based CLI to manage your Gists.","body":"# Gists.cli\r\n\r\n\r\n> I'm a Developer who uses VI and the like. iPad and iPhone apps are great, but when I really need a Gist i'm at the command line. \r\n\r\nAn easy to use CLI to manage *your* GitHub Gists. Create, edit, append, view, search and download. \r\n\r\n- Github - https://github.com/khilnani/gists.cli \r\n- Python Package - https://pypi.python.org/pypi/gists.cli\r\n\r\n# For the Casual User\r\n\r\n## Installation\r\n\r\n- Install the Python package manager PIP (http://www.pip-installer.org/)\r\n  - Run `sudo easy_install pip`\r\n- Once PIP is installed, \r\n  - Run `sudo pip install gists.cli`\r\n  - Run `sudo pip install gists.cli --upgrade` if upgrading.\r\n\r\n## Authentication\r\n\r\n\r\n- By default the application will attempt to use Basic Auth to authenticate i.e. will prompt for username/password each time it is run.\r\n- If the file `~/.git-credentials` is available, it will use the first OAuth token entry. \r\n- If the file  `~/.gists` with a Github OAuth token is found, it will be given preference over the above two mechanisms.\r\n- Run `./gists token|t` to avoid the username/password prompt and to use an OAuth Token other than `~/.git-credentials`. Saves to `~/.gists`.\r\n\r\n## Usage\r\n\r\n\r\n*All the commands below are interactive and will prompt for user input (eg. public/private, descriptions) and confirmations (eg. directory creation).*\r\n\r\n**List all your Gists**\r\n\r\n- `./gists`\r\n\r\n**View a Gist**\r\n\r\n- `./gists ID` - View Gist with ID on the console.\r\n- `./gists ID PATH` - Download Gist files with ID to PATH. Will prompt for confirmation.\r\n\r\n\r\n**Create a Gist**\r\n\r\nWe'll prompt for stuff like Gist type (public/private), Description and Gist Content as needed.\r\n\r\n- `./gists new` or `./gists create`\r\n- `./gists FILE` - Create a Gist using the contents of FILE\r\n- `./gists \"Content\"` - Create a Gist using the string \"Content\"\r\n\r\nTo avoid the Public/private Gist type prompt -\r\n\r\n> Bool should be `true` for Public, `false` for Private\r\n\r\n- `./gists Bool FILE`\r\n- `./gists Bool \"Content\"`\r\n\r\n\r\n\r\n# For The Advanced User\r\n\r\n\r\n## Usage\r\n\r\n\r\n*All the commands below are interactive and will prompt for user input.*\r\n*To suppress interactivity, simple include the word 'suppress', 'silent' or 's'. See the 'Tips' section for more info.*\r\n\r\n**List all your Gists**\r\n\r\n- `./gists` - list your Gists.\r\n\r\n**View a Gist**\r\n\r\n- `./gists ID` - view Gist with ID on the console.\r\n- `./gists ID PATH` - download Gist files with ID to PATH. Will prompt for confirmation.\r\n\r\n**Setup OAuth token**\r\n\r\n- `./gists token|t` - setup to use OAuth Token other than `~/.git-credentials`. Saves to `~/.gists`.\r\n\r\n**Create a Gist**\r\n\r\n> - FILE - is a file path, relative or absolute.\r\n> - Bool - True for Public, False for Private. Supports True, False, 1, 0, Yes, No, y, n. Case-insensitive\r\n> - Description and Content - Text content within quotes\r\n\r\n\r\nWithout specifying a command (eg. create, new), the application will trying to figure it out. However, this supports fewer combinations of arguments.\r\n\r\n- `./gists FILE`\r\n- `./gists \"Content\"`\r\n- `./gists Bool FILE`\r\n- `./gists Bool \"Content\"`\r\n- `./gists \"Description\" FILE`\r\n- `./gists \"Description\" \"Content\"`\r\n- `./gists Bool \"Description\" FILE`\r\n- `./gists Bool \"Description\" \"Content\"`\r\n\r\n\r\nIf you like to type, or be specific (will prompt for stuff like Gist type, Description and Gist Content etc as needed).\r\n\r\n- `./gists new|n|create|c`\r\n- `./gists new|n|create|c FILE`\r\n- `./gists new|n|create|c \"Content\"`\r\n- `./gists new|n|create|c Bool FILE`\r\n- `./gists new|n|create|c Bool \"Content\"`\r\n- `./gists new|n|create|c \"Description\" FILE`\r\n- `./gists new|n|create|c \"Description\" \"Content\"`\r\n- `./gists new|n|create|c Bool \"Description\" FILE`\r\n- `./gists new|n|create|c Bool \"Description\" \"Content\"`\r\n\r\n\r\n# For the Developer\r\n\r\n## Installation\r\n\r\nIf you would like to contribute changes to the code base\r\n\r\n- Get the code\r\n  - Fork and `git clone` the fork, or ...\r\n  - `git clone https://github.com/khilnani/gists.cli.git`, or ...\r\n  - Download the latest Tag Archive from https://github.com/khilnani/gists.cli  \r\n    - *Downloading the Archive is not recommended, since it won't be easy to merge code back*.\r\n- Install dependencies by running `./setup.sh`. \r\n  - This installs PIP (if not already installed) and then installs the dependencies.\r\n- Run the installer as below. If you get any error run with `sudo ...`\r\n  - `./install.py` with no arguments will install to `/usr/local/bin`.\r\n  - `./install.py INSTALL_PATH` will install to a specific directory.\r\n  \r\n## Tips\r\n\r\n- Add `debug|d` at the end of any execution to view low level details. eg. `./gists debug`. *NOTE - This will reveal your OAuth ID but not your Basic Auth password.*\r\n- Add `supress|silent|s` at the end of any execution to supress any prompts of confirmations if you like to live dangerously. \r\n  - eg. `./gists create FILE supress debug`. \r\n\r\n# In Development\r\n\r\n- `./gists update|u ID [PARAMS]` - Update a Gist. Content sent via Console, Clipboard or File.\r\n- `./gists delete|del|d ID` - Delete a Gist.\r\n- `./gists append|a ID [PARAMS]` - Append to a Gist. Content sent via Console, Clipboard or File.\r\n- `./gists backup|b [DIR]` - Backup all Gists in the user's account.\r\n- `./gists search|query|q QUERY` - Search Gists.\r\n- `./gists star` - List starred Gists\r\n\r\n# Issues and Roadmap\r\n\r\n- Take a look at https://github.com/khilnani/gists.cli/issues to view Issues and Milestones.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}